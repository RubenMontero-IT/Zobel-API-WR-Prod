// <auto-generated />
using System;
using DhubSolutions.WealthReport.Infrastructure.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Zobel.WealthReport.Infrastructure.Data.Migrations.ProjectManagement
{
    [DbContext(typeof(ProjectManagementDbContext))]
    [Migration("20200410004040_AddingNewReportEntites")]
    partial class AddingNewReportEntites
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Zobel.Common.Domain.Entities.Admin.DefaultRolePermission", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("DefaultRolePermissionID")
                        .HasMaxLength(100);

                    b.Property<bool>("Active");

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModificationUser")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Orgid")
                        .IsRequired()
                        .HasColumnName("ORGID")
                        .HasMaxLength(100);

                    b.Property<string>("PermissionId")
                        .IsRequired()
                        .HasColumnName("PermissionID")
                        .HasMaxLength(100);

                    b.Property<string>("Rvid")
                        .IsRequired()
                        .HasColumnName("RVID")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("ModificationUser");

                    b.HasIndex("PermissionId");

                    b.HasIndex("Rvid", "Orgid", "PermissionId")
                        .IsUnique()
                        .HasName("IX_DefaultRolePermission");

                    b.ToTable("DefaultRolePermission","userm");
                });

            modelBuilder.Entity("Zobel.Common.Domain.Entities.Admin.LogUserByApp", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("LogUAID")
                        .HasMaxLength(100);

                    b.Property<string>("ActionId")
                        .HasColumnName("ActionID")
                        .HasMaxLength(100);

                    b.Property<string>("Appid")
                        .IsRequired()
                        .HasColumnName("APPID")
                        .HasMaxLength(100);

                    b.Property<string>("Description")
                        .HasMaxLength(150);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Userid")
                        .IsRequired()
                        .HasColumnName("USERID")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("LogUserByApp","app");
                });

            modelBuilder.Entity("Zobel.Common.Domain.Entities.Admin.Organization", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ORGID")
                        .HasMaxLength(100);

                    b.Property<int?>("LucanetId")
                        .HasColumnName("LucanetId");

                    b.Property<string>("OrganizationDescription")
                        .HasMaxLength(150);

                    b.Property<string>("OrganizationName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("ResourceId")
                        .HasColumnName("ResourceID")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("ResourceId");

                    b.ToTable("Organization","userm");
                });

            modelBuilder.Entity("Zobel.Common.Domain.Entities.Admin.OrganizationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("OrganizationRoleID")
                        .HasMaxLength(100);

                    b.Property<string>("Description")
                        .HasMaxLength(150);

                    b.Property<bool>("IsDefault");

                    b.Property<string>("OrganizationId")
                        .IsRequired()
                        .HasColumnName("ORGID")
                        .HasMaxLength(100);

                    b.Property<string>("Rvid")
                        .IsRequired()
                        .HasColumnName("RVID")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("Rvid", "OrganizationId")
                        .IsUnique()
                        .HasName("IX_OrganizationRole");

                    b.ToTable("OrganizationRole","userm");
                });

            modelBuilder.Entity("Zobel.Common.Domain.Entities.Admin.PasswordRequests", b =>
                {
                    b.Property<string>("RequestId")
                        .HasColumnName("REQUESTID")
                        .HasMaxLength(255);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Userid")
                        .IsRequired()
                        .HasColumnName("USERID")
                        .HasMaxLength(100);

                    b.HasKey("RequestId");

                    b.HasIndex("Userid");

                    b.ToTable("PasswordRequests","userm");
                });

            modelBuilder.Entity("Zobel.Common.Domain.Entities.Admin.Permission", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("PermissionID")
                        .HasMaxLength(100);

                    b.Property<string>("Description");

                    b.Property<string>("PermissionCode")
                        .HasMaxLength(50);

                    b.Property<string>("PermissionRelevance")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Style")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.ToTable("Permission","userm");
                });

            modelBuilder.Entity("Zobel.Common.Domain.Entities.Admin.RoleAppPermission", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("RoleAppPermissionID")
                        .HasMaxLength(100);

                    b.Property<string>("Appid")
                        .IsRequired()
                        .HasColumnName("APPID")
                        .HasMaxLength(100);

                    b.Property<bool>("Denied");

                    b.Property<DateTime?>("ExpirationDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Orgid")
                        .IsRequired()
                        .HasColumnName("ORGID")
                        .HasMaxLength(100);

                    b.Property<string>("PermissionId")
                        .IsRequired()
                        .HasColumnName("PermissionID")
                        .HasMaxLength(100);

                    b.Property<string>("Rvid")
                        .IsRequired()
                        .HasColumnName("RVID")
                        .HasMaxLength(100);

                    b.Property<bool>("WithGrant");

                    b.HasKey("Id");

                    b.HasIndex("Appid");

                    b.HasIndex("PermissionId");

                    b.HasIndex("Rvid", "Orgid", "Appid", "PermissionId")
                        .IsUnique()
                        .HasName("IX_RoleAppPermission");

                    b.ToTable("RoleAppPermission","userm");
                });

            modelBuilder.Entity("Zobel.Common.Domain.Entities.Admin.RoleFilePermission", b =>
                {
                    b.Property<string>("Rvid")
                        .HasColumnName("RVID")
                        .HasMaxLength(100);

                    b.Property<string>("Orgid")
                        .HasColumnName("ORGID")
                        .HasMaxLength(100);

                    b.Property<string>("PermissionId")
                        .HasColumnName("PermissionID")
                        .HasMaxLength(100);

                    b.Property<string>("Id")
                        .HasColumnName("FileID")
                        .HasMaxLength(100);

                    b.Property<bool>("Denied");

                    b.Property<DateTime?>("ExpirationDateTime")
                        .HasColumnType("datetime");

                    b.Property<bool>("WithGrant");

                    b.HasKey("Rvid", "Orgid", "PermissionId", "Id")
                        .HasName("PK_RoleFilePermission_1");

                    b.HasIndex("Id");

                    b.HasIndex("PermissionId");

                    b.ToTable("RoleFilePermission","userm");
                });

            modelBuilder.Entity("Zobel.Common.Domain.Entities.Admin.RoleProjectPermission", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("RoleProjectPermissionID")
                        .HasMaxLength(100);

                    b.Property<bool>("Denied");

                    b.Property<DateTime?>("ExpirationDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Orgid")
                        .IsRequired()
                        .HasColumnName("ORGID")
                        .HasMaxLength(100);

                    b.Property<string>("PermissionId")
                        .IsRequired()
                        .HasColumnName("PermissionID")
                        .HasMaxLength(100);

                    b.Property<string>("ProjectId")
                        .IsRequired()
                        .HasColumnName("ProjectID")
                        .HasMaxLength(100);

                    b.Property<string>("Rvid")
                        .IsRequired()
                        .HasColumnName("RVID")
                        .HasMaxLength(100);

                    b.Property<bool>("WithGrant");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("Rvid", "Orgid", "ProjectId", "PermissionId")
                        .HasName("IX_RoleProjectPermission");

                    b.ToTable("RoleProjectPermission","userm");
                });

            modelBuilder.Entity("Zobel.Common.Domain.Entities.Admin.RoleType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("RTID")
                        .HasMaxLength(100);

                    b.Property<string>("Description")
                        .HasMaxLength(150);

                    b.Property<string>("RoleTypeName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("RoleType","userm");
                });

            modelBuilder.Entity("Zobel.Common.Domain.Entities.Admin.RoleValue", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("RVID")
                        .HasMaxLength(100);

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(150);

                    b.Property<string>("Description")
                        .HasMaxLength(150);

                    b.Property<bool>("IsDefault");

                    b.Property<string>("Rtid")
                        .HasColumnName("RTID")
                        .HasMaxLength(100);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id")
                        .HasName("PK_RoleValues");

                    b.HasIndex("Rtid");

                    b.ToTable("RoleValue","userm");
                });

            modelBuilder.Entity("Zobel.Common.Domain.Entities.Admin.Session", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("SessionID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<DateTime>("Access")
                        .HasColumnType("datetime");

                    b.Property<string>("Data")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Expires")
                        .HasColumnType("datetime");

                    b.Property<string>("Userid")
                        .IsRequired()
                        .HasColumnName("USERID")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Session","gral");
                });

            modelBuilder.Entity("Zobel.Common.Domain.Entities.Admin.SystemGroup", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasMaxLength(50);

                    b.Property<string>("Code")
                        .HasColumnName("Code")
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .HasColumnName("Description")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("SystemGroup","app");
                });

            modelBuilder.Entity("Zobel.Common.Domain.Entities.Admin.SystemGroupMemberShip", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasMaxLength(50);

                    b.Property<string>("OrganizationRoleId")
                        .HasColumnName("OrganizationRoleId")
                        .HasMaxLength(100);

                    b.Property<string>("SystemGroupId")
                        .HasColumnName("SystemGroupId")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("OrganizationRoleId");

                    b.HasIndex("SystemGroupId");

                    b.ToTable("SystemGroupMemberShip","app");
                });

            modelBuilder.Entity("Zobel.Common.Domain.Entities.Admin.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID")
                        .HasMaxLength(100);

                    b.Property<int>("AccessFailedCount");

                    b.Property<bool>("Active");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Description");

                    b.Property<string>("DeskPhone")
                        .HasMaxLength(50);

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<DateTime>("InitDate")
                        .HasColumnType("date");

                    b.Property<bool>("Internal");

                    b.Property<bool>("IsAdemoUser")
                        .HasColumnName("IsADemoUser");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("ResourceId")
                        .HasColumnName("ResourceID")
                        .HasMaxLength(100);

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<string>("UserPicture")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("ResourceId");

                    b.ToTable("User","userm");
                });

            modelBuilder.Entity("Zobel.Common.Domain.Entities.Admin.UserRoleOrg", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("UserRoleOrgID")
                        .HasMaxLength(100);

                    b.Property<string>("Orgid")
                        .IsRequired()
                        .HasColumnName("ORGID")
                        .HasMaxLength(100);

                    b.Property<string>("Rvid")
                        .IsRequired()
                        .HasColumnName("RVID")
                        .HasMaxLength(100);

                    b.Property<string>("Userid")
                        .IsRequired()
                        .HasColumnName("USERID")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("Rvid", "Orgid");

                    b.HasIndex("Userid", "Rvid", "Orgid")
                        .IsUnique()
                        .HasName("IX_UserRoleOrg");

                    b.ToTable("UserRoleOrg","userm");
                });

            modelBuilder.Entity("Zobel.Common.Domain.Entities.Application.AppMaxPermission", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("APPID");

                    b.Property<string>("Userid")
                        .HasColumnName("USERID");

                    b.Property<string>("MaxPermission");

                    b.HasKey("Id", "Userid", "MaxPermission");

                    b.HasIndex("MaxPermission");

                    b.HasIndex("Userid");

                    b.ToTable("AppMaxPermission","app");
                });

            modelBuilder.Entity("Zobel.Common.Domain.Entities.Application.AppSetting", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("SettingID")
                        .HasMaxLength(100);

                    b.Property<string>("Appid")
                        .IsRequired()
                        .HasColumnName("APPID")
                        .HasMaxLength(100);

                    b.Property<string>("DefaultValue");

                    b.Property<string>("Description");

                    b.Property<string>("SettingName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id")
                        .HasName("PK_AppSettings");

                    b.HasIndex("Appid");

                    b.ToTable("AppSetting","app");
                });

            modelBuilder.Entity("Zobel.Common.Domain.Entities.Application.AppSettingRoleVOrg", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("AppSettingRoleVOrgID")
                        .HasMaxLength(100);

                    b.Property<string>("Orgid")
                        .IsRequired()
                        .HasColumnName("ORGID")
                        .HasMaxLength(100);

                    b.Property<string>("Rvid")
                        .IsRequired()
                        .HasColumnName("RVID")
                        .HasMaxLength(100);

                    b.Property<string>("SettingId")
                        .IsRequired()
                        .HasColumnName("SettingID")
                        .HasMaxLength(100);

                    b.Property<string>("Value")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("SettingId");

                    b.HasIndex("Rvid", "Orgid", "SettingId")
                        .IsUnique()
                        .HasName("IX_AppSettingRoleVOrg");

                    b.ToTable("AppSettingRoleVOrg","app");
                });

            modelBuilder.Entity("Zobel.Common.Domain.Entities.Application.AppSettingsByUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("AppSettingsByUserID")
                        .HasMaxLength(100);

                    b.Property<string>("SettingId")
                        .IsRequired()
                        .HasColumnName("SettingID")
                        .HasMaxLength(100);

                    b.Property<string>("Userid")
                        .IsRequired()
                        .HasColumnName("USERID")
                        .HasMaxLength(100);

                    b.Property<string>("Value")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("Userid");

                    b.HasIndex("SettingId", "Userid")
                        .IsUnique()
                        .HasName("IX_AppSettingsByUser");

                    b.ToTable("AppSettingsByUser","app");
                });

            modelBuilder.Entity("Zobel.Common.Domain.Entities.Application.AppSettingsMV", b =>
                {
                    b.Property<string>("SettingId")
                        .HasColumnName("SettingID")
                        .HasMaxLength(100);

                    b.Property<string>("Id")
                        .HasColumnName("AppSettingsMVID")
                        .HasMaxLength(100);

                    b.Property<string>("Value")
                        .IsRequired()
                        .IsUnicode(false);

                    b.HasKey("SettingId", "Id");

                    b.ToTable("AppSettingsMV","app");
                });

            modelBuilder.Entity("Zobel.Common.Domain.Entities.Application.Apps", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("APPID")
                        .HasMaxLength(100);

                    b.Property<string>("AlternativeName")
                        .HasMaxLength(250);

                    b.Property<string>("AppCode")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("AppIsWeb");

                    b.Property<string>("AppLogo")
                        .HasMaxLength(250);

                    b.Property<string>("AppName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("AppUrl")
                        .HasColumnName("AppURL")
                        .HasMaxLength(250);

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.Property<bool>("InternalUse");

                    b.Property<bool>("IsEnable");

                    b.HasKey("Id");

                    b.ToTable("Apps","app");
                });

            modelBuilder.Entity("Zobel.Common.Domain.Entities.Application.CommentedResource", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("CommentedResourceID")
                        .HasMaxLength(100);

                    b.Property<string>("CommentId")
                        .IsRequired()
                        .HasColumnName("CommentID")
                        .HasMaxLength(100);

                    b.Property<string>("Description")
                        .HasMaxLength(150);

                    b.Property<string>("FeatureId")
                        .HasColumnName("FeatureID")
                        .HasMaxLength(100);

                    b.Property<string>("ResourceId")
                        .IsRequired()
                        .HasColumnName("ResourceID")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("FeatureId");

                    b.HasIndex("ResourceId", "CommentId", "FeatureId")
                        .IsUnique()
                        .HasName("IX_CommentedResource")
                        .HasFilter("[FeatureID] IS NOT NULL");

                    b.ToTable("CommentedResource","app");
                });

            modelBuilder.Entity("Zobel.Common.Domain.Entities.Application.Country", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("CountryID")
                        .HasMaxLength(100);

                    b.Property<string>("CountryAcronym")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Country","gral");
                });

            modelBuilder.Entity("Zobel.Common.Domain.Entities.Application.Currency", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("CurrencyID")
                        .HasMaxLength(100);

                    b.Property<string>("CurrencyValue")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.Property<string>("Description")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Currency","gral");
                });

            modelBuilder.Entity("Zobel.Common.Domain.Entities.Application.Feature", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("FeatureID")
                        .HasMaxLength(100);

                    b.Property<string>("Description")
                        .HasMaxLength(100);

                    b.Property<string>("FeatureName")
                        .HasMaxLength(50);

                    b.Property<string>("ResourceTypeId")
                        .IsRequired()
                        .HasColumnName("ResourceTypeID")
                        .HasMaxLength(100);

                    b.HasKey("Id")
                        .HasName("PK_Feature_1");

                    b.HasIndex("ResourceTypeId");

                    b.ToTable("Feature","app");
                });

            modelBuilder.Entity("Zobel.Common.Domain.Entities.Application.FinancingRepayment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID")
                        .HasMaxLength(100);

                    b.Property<string>("Description")
                        .HasMaxLength(150);

                    b.Property<string>("Value")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.ToTable("FinancingRepayment","gral");
                });

            modelBuilder.Entity("Zobel.Common.Domain.Entities.Application.Industry", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("IndustryID")
                        .HasMaxLength(100);

                    b.Property<string>("Description")
                        .HasMaxLength(150);

                    b.Property<string>("IndustryValue")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.ToTable("Industry","gral");
                });

            modelBuilder.Entity("Zobel.Common.Domain.Entities.Application.ProcessType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ProcessTypeID")
                        .HasMaxLength(100);

                    b.Property<string>("Description")
                        .HasMaxLength(150);

                    b.Property<string>("ProcessTypeValue")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("ProcessType","gral");
                });

            modelBuilder.Entity("Zobel.Common.Domain.Entities.Application.Resource", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ResourceID")
                        .HasMaxLength(100);

                    b.Property<string>("Description")
                        .HasMaxLength(150);

                    b.Property<string>("ResourceType")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("ResourceType");

                    b.ToTable("Resource","app");
                });

            modelBuilder.Entity("Zobel.Common.Domain.Entities.Application.ResourceType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ResourceTypeID")
                        .HasMaxLength(100);

                    b.Property<string>("Description")
                        .HasMaxLength(150);

                    b.Property<string>("ResourceTypeName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("ResourceType","app");
                });

            modelBuilder.Entity("Zobel.Common.Domain.Entities.Application.SPAMechanism", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID")
                        .HasMaxLength(100);

                    b.Property<string>("Description")
                        .HasMaxLength(50);

                    b.Property<string>("Value")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("SPAMechanism","gral");
                });

            modelBuilder.Entity("Zobel.Common.Domain.Entities.Application.SaleReason", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("SaleReasonID")
                        .HasMaxLength(100);

                    b.Property<string>("Description")
                        .HasMaxLength(150);

                    b.Property<string>("SaleReasonValue")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.ToTable("SaleReason","gral");
                });

            modelBuilder.Entity("Zobel.Common.Domain.Entities.Application.SegmentProductCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("SegProdCatID")
                        .HasMaxLength(100);

                    b.Property<string>("Description")
                        .HasMaxLength(50);

                    b.Property<string>("SegProdCatValue")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.ToTable("SegmentProductCategory","gral");
                });

            modelBuilder.Entity("Zobel.Common.Domain.Entities.Application.Seller", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("SellerID")
                        .HasMaxLength(100);

                    b.Property<string>("Description")
                        .HasMaxLength(50);

                    b.Property<string>("SellerValue")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.ToTable("Seller","gral");
                });

            modelBuilder.Entity("Zobel.Common.Domain.Entities.Application.SharedComment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("SharedCommentID")
                        .HasMaxLength(100);

                    b.Property<string>("CommentId")
                        .IsRequired()
                        .HasColumnName("CommentID")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<bool?>("ReadOnly");

                    b.Property<string>("Rvid")
                        .IsRequired()
                        .HasColumnName("RVID")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("Rvid");

                    b.HasIndex("CommentId", "Rvid")
                        .IsUnique()
                        .HasName("IX_SharedComment");

                    b.ToTable("SharedComment","app");
                });

            modelBuilder.Entity("Zobel.Common.Domain.Entities.Application.Status", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("StatusID")
                        .HasMaxLength(100);

                    b.Property<string>("Description")
                        .HasMaxLength(150);

                    b.Property<string>("StatusValue")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Status","gral");
                });

            modelBuilder.Entity("Zobel.Common.Domain.Entities.Application.Tag", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("TagID")
                        .HasMaxLength(100);

                    b.Property<int?>("Author");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description");

                    b.Property<bool>("IsType");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("TagParent")
                        .HasMaxLength(100);

                    b.HasKey("Id")
                        .HasName("PK_Tags");

                    b.HasIndex("TagParent");

                    b.ToTable("Tag","gral");
                });

            modelBuilder.Entity("Zobel.Common.Domain.Entities.Application.TypeOfDisclosure", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID")
                        .HasMaxLength(100);

                    b.Property<string>("Description")
                        .HasMaxLength(50);

                    b.Property<string>("Value")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("TypeOfDisclosure","gral");
                });

            modelBuilder.Entity("Zobel.Common.Domain.Entities.Application.TypeOfPurchase", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID")
                        .HasMaxLength(100);

                    b.Property<string>("Description")
                        .HasMaxLength(50);

                    b.Property<string>("Value")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("TypeOfPurchase","gral");
                });

            modelBuilder.Entity("Zobel.Reports.Domain.Entities.DataUploader.FileContent", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FileContentID")
                        .HasMaxLength(100);

                    b.Property<byte[]>("Content")
                        .IsRequired()
                        .HasColumnName("FileContent");

                    b.Property<string>("StoredFileId")
                        .IsRequired()
                        .HasColumnName("StoredFileID");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnName("UploadDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("StoredFileId");

                    b.ToTable("FileContent","dbi");
                });

            modelBuilder.Entity("Zobel.Reports.Domain.Entities.DataUploader.FileExtension", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FileExtensionID")
                        .HasMaxLength(100);

                    b.Property<string>("FileExtensionIcon")
                        .HasColumnName("FileExtensionIcon");

                    b.Property<string>("FileExtensionValue")
                        .IsRequired()
                        .HasColumnName("FileExtensionValue")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("FileExtension","dbi");
                });

            modelBuilder.Entity("Zobel.Reports.Domain.Entities.DataUploader.StoredFile", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StoredFileID")
                        .HasMaxLength(100);

                    b.Property<string>("Description")
                        .HasColumnName("Description")
                        .HasMaxLength(250);

                    b.Property<string>("FileExtensionId")
                        .IsRequired()
                        .HasColumnName("FileExtensionID")
                        .HasMaxLength(100);

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnName("FileName")
                        .HasMaxLength(250);

                    b.Property<string>("OrganizationId")
                        .IsRequired()
                        .HasColumnName("OrganizationID");

                    b.Property<string>("Period")
                        .IsRequired()
                        .HasColumnName("PeriodID")
                        .HasMaxLength(7);

                    b.Property<string>("UploadedById")
                        .IsRequired()
                        .HasColumnName("UploadedByID");

                    b.HasKey("Id");

                    b.HasIndex("FileExtensionId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("UploadedById");

                    b.ToTable("StoredFile","dbi");
                });

            modelBuilder.Entity("Zobel.Reports.Domain.Entities.ReportManager.Report", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasMaxLength(100);

                    b.Property<string>("CreatedById")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Data");

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime");

                    b.Property<string>("Metadata");

                    b.Property<string>("Name");

                    b.Property<string>("PeriodId")
                        .IsRequired()
                        .HasColumnName("PeriodID")
                        .HasMaxLength(7);

                    b.Property<string>("TemplateId")
                        .HasColumnName("TemplateId");

                    b.Property<string>("Visibility")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("TemplateId");

                    b.ToTable("Report","wrp");
                });

            modelBuilder.Entity("Zobel.Reports.Domain.Entities.ReportManager.ReportElement", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasMaxLength(100);

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<string>("Config");

                    b.Property<string>("ContainerId")
                        .HasColumnName("ContainerID");

                    b.Property<string>("CreatedById")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DataIndex");

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime");

                    b.Property<string>("LastModifiedById");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<string>("ReportId")
                        .HasColumnName("ReportId");

                    b.Property<string>("ReportTemplateElementId");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.HasIndex("ContainerId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastModifiedById");

                    b.HasIndex("ReportId");

                    b.HasIndex("ReportTemplateElementId");

                    b.ToTable("ReportElement","wrp");
                });

            modelBuilder.Entity("Zobel.Reports.Domain.Entities.ReportManager.ReportElementPermission", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasMaxLength(100);

                    b.Property<string>("OrganizationRoleId")
                        .IsRequired()
                        .HasColumnName("OrganizationRoleID")
                        .HasMaxLength(100);

                    b.Property<string>("PermissionId")
                        .IsRequired()
                        .HasColumnName("PermissionID")
                        .HasMaxLength(100);

                    b.Property<string>("ReportElementId")
                        .IsRequired()
                        .HasColumnName("ReportElementID")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("ReportElementId");

                    b.HasIndex("OrganizationRoleId", "PermissionId", "ReportElementId")
                        .IsUnique()
                        .HasName("IX_ReportElementPermission");

                    b.ToTable("ReportElementPermission","wrp");
                });

            modelBuilder.Entity("Zobel.Reports.Domain.Entities.ReportManager.ReportPermission", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasMaxLength(100);

                    b.Property<string>("OrganizationId")
                        .IsRequired()
                        .HasColumnName("OrganizationID")
                        .HasMaxLength(100);

                    b.Property<string>("OrganizationRoleId")
                        .IsRequired()
                        .HasColumnName("OrganizationRoleID")
                        .HasMaxLength(100);

                    b.Property<string>("PermissionId")
                        .HasColumnName("PermissionID")
                        .HasMaxLength(100);

                    b.Property<string>("ReportId")
                        .IsRequired()
                        .HasColumnName("ReportID")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("ReportId");

                    b.HasIndex("OrganizationRoleId", "OrganizationId", "PermissionId", "ReportId")
                        .IsUnique()
                        .HasName("IX_ReportPermission")
                        .HasFilter("[PermissionID] IS NOT NULL");

                    b.ToTable("ReportPermission","wrp");
                });

            modelBuilder.Entity("Zobel.Reports.Domain.Entities.ReportManager.ReportTemplate", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasMaxLength(100);

                    b.Property<string>("CreatedById")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Data");

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime");

                    b.Property<string>("Metadata");

                    b.Property<string>("Name");

                    b.Property<string>("Visibility")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("ReportTemplate","wrp");
                });

            modelBuilder.Entity("Zobel.Reports.Domain.Entities.ReportManager.ReportTemplateActivePeriod", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive")
                        .HasColumnName("IsActive");

                    b.Property<string>("OrganizationId")
                        .IsRequired()
                        .HasColumnName("OrganizationId")
                        .HasMaxLength(100);

                    b.Property<string>("Period")
                        .IsRequired()
                        .HasColumnName("Period")
                        .HasMaxLength(7);

                    b.Property<string>("ReportTemplateId")
                        .IsRequired()
                        .HasColumnName("ReportTemplateId")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ReportTemplateId");

                    b.ToTable("ReportTemplateActivePeriod","wrp");
                });

            modelBuilder.Entity("Zobel.Reports.Domain.Entities.ReportManager.ReportTemplateElement", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasMaxLength(100);

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<string>("Config");

                    b.Property<string>("ContainerId")
                        .HasColumnName("ContainerId");

                    b.Property<string>("CreatedById")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DataIndex");

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.Property<int>("ElementIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ElementIndex")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime");

                    b.Property<string>("LastModifiedById");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<string>("ReportTemplateId")
                        .HasColumnName("ReportTemplateId");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.HasIndex("ContainerId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastModifiedById");

                    b.HasIndex("ReportTemplateId");

                    b.ToTable("ReportTemplateElement","wrp");
                });

            modelBuilder.Entity("Zobel.Reports.Domain.Entities.ReportManager.ReportTemplateElementPermission", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasMaxLength(100);

                    b.Property<string>("OrganizationRoleId")
                        .IsRequired()
                        .HasColumnName("OrganizationRoleID")
                        .HasMaxLength(100);

                    b.Property<string>("PermissionId")
                        .IsRequired()
                        .HasColumnName("PermissionID")
                        .HasMaxLength(100);

                    b.Property<string>("ReportTemplateElementId")
                        .IsRequired()
                        .HasColumnName("ReportTemplateElementID")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("ReportTemplateElementId");

                    b.HasIndex("OrganizationRoleId", "PermissionId", "ReportTemplateElementId")
                        .IsUnique()
                        .HasName("IX_ReportTemplateElementPermission");

                    b.ToTable("ReportTemplateElementPermission","wrp");
                });

            modelBuilder.Entity("Zobel.Reports.Domain.Entities.ReportManager.ReportTemplatePermission", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasMaxLength(100);

                    b.Property<string>("OrganizationRoleId")
                        .IsRequired()
                        .HasColumnName("OrganizationRoleID")
                        .HasMaxLength(100);

                    b.Property<string>("PermissionId")
                        .IsRequired()
                        .HasColumnName("PermissionID")
                        .HasMaxLength(100);

                    b.Property<string>("ReportTemplateId")
                        .IsRequired()
                        .HasColumnName("ReportTemplateID")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("ReportTemplateId");

                    b.HasIndex("OrganizationRoleId", "PermissionId", "ReportTemplateId")
                        .IsUnique()
                        .HasName("IX_ReportTemplatePermission");

                    b.ToTable("ReportTemplatePermission","wrp");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Zobel.Common.Domain.Entities.Admin.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Zobel.Common.Domain.Entities.Admin.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Zobel.Common.Domain.Entities.Admin.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Zobel.Common.Domain.Entities.Admin.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Zobel.Common.Domain.Entities.Admin.DefaultRolePermission", b =>
                {
                    b.HasOne("Zobel.Common.Domain.Entities.Admin.User", "User")
                        .WithMany("DefaultRolePermission")
                        .HasForeignKey("ModificationUser")
                        .HasConstraintName("FK_DefaultRolePermission_User");

                    b.HasOne("Zobel.Common.Domain.Entities.Admin.Permission", "Permission")
                        .WithMany("DefaultRolePermission")
                        .HasForeignKey("PermissionId")
                        .HasConstraintName("FK_DefaultRolePermission_Permission");

                    b.HasOne("Zobel.Common.Domain.Entities.Admin.OrganizationRole", "OrganizationRole")
                        .WithMany("DefaultRolePermission")
                        .HasForeignKey("Rvid", "Orgid")
                        .HasConstraintName("FK_DefaultRolePermission_OrganizationRole")
                        .HasPrincipalKey("Rvid", "OrganizationId");
                });

            modelBuilder.Entity("Zobel.Common.Domain.Entities.Admin.Organization", b =>
                {
                    b.HasOne("Zobel.Common.Domain.Entities.Application.Resource", "Resource")
                        .WithMany("Organizations")
                        .HasForeignKey("ResourceId")
                        .HasConstraintName("FK_Organization_Resource");
                });

            modelBuilder.Entity("Zobel.Common.Domain.Entities.Admin.OrganizationRole", b =>
                {
                    b.HasOne("Zobel.Common.Domain.Entities.Admin.Organization", "Organization")
                        .WithMany("OrganizationsRoles")
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_OrganizationRole_Organization");

                    b.HasOne("Zobel.Common.Domain.Entities.Admin.RoleValue", "RoleValue")
                        .WithMany("OrganizationRoles")
                        .HasForeignKey("Rvid")
                        .HasConstraintName("FK_OrganizationRole_RoleValue");
                });

            modelBuilder.Entity("Zobel.Common.Domain.Entities.Admin.PasswordRequests", b =>
                {
                    b.HasOne("Zobel.Common.Domain.Entities.Admin.User", "User")
                        .WithMany("PasswordRequests")
                        .HasForeignKey("Userid")
                        .HasConstraintName("FK_PasswordRequests_User");
                });

            modelBuilder.Entity("Zobel.Common.Domain.Entities.Admin.RoleAppPermission", b =>
                {
                    b.HasOne("Zobel.Common.Domain.Entities.Application.Apps", "App")
                        .WithMany("RoleAppPermission")
                        .HasForeignKey("Appid")
                        .HasConstraintName("FK_RoleAppPermission_Apps");

                    b.HasOne("Zobel.Common.Domain.Entities.Admin.Permission", "PermissionUser")
                        .WithMany("RoleAppPermission")
                        .HasForeignKey("PermissionId")
                        .HasConstraintName("FK_RoleAppPermission_Permission");

                    b.HasOne("Zobel.Common.Domain.Entities.Admin.OrganizationRole", "OrganizationRole")
                        .WithMany("RoleAppPermission")
                        .HasForeignKey("Rvid", "Orgid")
                        .HasConstraintName("FK_RoleAppPermission_OrganizationRole")
                        .HasPrincipalKey("Rvid", "OrganizationId");
                });

            modelBuilder.Entity("Zobel.Common.Domain.Entities.Admin.RoleFilePermission", b =>
                {
                    b.HasOne("Zobel.Common.Domain.Entities.Admin.OrganizationRole", "OrganizationRole")
                        .WithMany("RoleFilePermission")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Zobel.Common.Domain.Entities.Admin.Permission", "Permission")
                        .WithMany("RoleFilePermission")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Zobel.Common.Domain.Entities.Admin.RoleProjectPermission", b =>
                {
                    b.HasOne("Zobel.Common.Domain.Entities.Admin.Permission", "Permissions")
                        .WithMany("RoleProjectPermission")
                        .HasForeignKey("PermissionId")
                        .HasConstraintName("FK_RoleProjectPermission_Permission");

                    b.HasOne("Zobel.Common.Domain.Entities.Admin.OrganizationRole", "OrganizationRole")
                        .WithMany("RoleProjectPermission")
                        .HasForeignKey("Rvid", "Orgid")
                        .HasConstraintName("FK_RoleProjectPermission_OrganizationRole")
                        .HasPrincipalKey("Rvid", "OrganizationId");
                });

            modelBuilder.Entity("Zobel.Common.Domain.Entities.Admin.RoleValue", b =>
                {
                    b.HasOne("Zobel.Common.Domain.Entities.Admin.RoleType", "Role")
                        .WithMany("RoleValues")
                        .HasForeignKey("Rtid")
                        .HasConstraintName("FK_RoleValue_RoleType");
                });

            modelBuilder.Entity("Zobel.Common.Domain.Entities.Admin.SystemGroupMemberShip", b =>
                {
                    b.HasOne("Zobel.Common.Domain.Entities.Admin.OrganizationRole", "OrganizationRole")
                        .WithMany("SystemGroupMemberShips")
                        .HasForeignKey("OrganizationRoleId")
                        .HasConstraintName("FK_SystemGroupMemberShip_OrganizationRole");

                    b.HasOne("Zobel.Common.Domain.Entities.Admin.SystemGroup", "SystemGroup")
                        .WithMany("SystemGroupMemberShips")
                        .HasForeignKey("SystemGroupId")
                        .HasConstraintName("FK_SystemGroupMemberShip_SystemGroup");
                });

            modelBuilder.Entity("Zobel.Common.Domain.Entities.Admin.User", b =>
                {
                    b.HasOne("Zobel.Common.Domain.Entities.Application.Resource", "Resources")
                        .WithMany("Users")
                        .HasForeignKey("ResourceId")
                        .HasConstraintName("FK_User_Resource");
                });

            modelBuilder.Entity("Zobel.Common.Domain.Entities.Admin.UserRoleOrg", b =>
                {
                    b.HasOne("Zobel.Common.Domain.Entities.Admin.User", "User")
                        .WithMany("UserRoleOrg")
                        .HasForeignKey("Userid")
                        .HasConstraintName("FK_UserRoleOrg_User");

                    b.HasOne("Zobel.Common.Domain.Entities.Admin.OrganizationRole", "OrganizationRole")
                        .WithMany("UserRoleOrg")
                        .HasForeignKey("Rvid", "Orgid")
                        .HasConstraintName("FK_UserRoleOrg_OrganizationRole")
                        .HasPrincipalKey("Rvid", "OrganizationId");
                });

            modelBuilder.Entity("Zobel.Common.Domain.Entities.Application.AppMaxPermission", b =>
                {
                    b.HasOne("Zobel.Common.Domain.Entities.Application.Apps", "App")
                        .WithMany("AppMaxPermission")
                        .HasForeignKey("Id")
                        .HasConstraintName("FK_AppMaxPermission_Apps");

                    b.HasOne("Zobel.Common.Domain.Entities.Admin.Permission", "MaxPermissionNavigation")
                        .WithMany("AppMaxPermission")
                        .HasForeignKey("MaxPermission")
                        .HasConstraintName("FK_AppMaxPermission_Permission");

                    b.HasOne("Zobel.Common.Domain.Entities.Admin.User", "User")
                        .WithMany()
                        .HasForeignKey("Userid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Zobel.Common.Domain.Entities.Application.AppSetting", b =>
                {
                    b.HasOne("Zobel.Common.Domain.Entities.Application.Apps", "App")
                        .WithMany("AppSetting")
                        .HasForeignKey("Appid")
                        .HasConstraintName("FK_AppSetting_Apps");
                });

            modelBuilder.Entity("Zobel.Common.Domain.Entities.Application.AppSettingRoleVOrg", b =>
                {
                    b.HasOne("Zobel.Common.Domain.Entities.Application.AppSetting", "Setting")
                        .WithMany("AppSettingRoleVorg")
                        .HasForeignKey("SettingId")
                        .HasConstraintName("FK_AppSettingRoleVOrg_AppSetting");

                    b.HasOne("Zobel.Common.Domain.Entities.Admin.OrganizationRole", "OrganizationRole")
                        .WithMany("AppSettingRoleVOrg")
                        .HasForeignKey("Rvid", "Orgid")
                        .HasConstraintName("FK_AppSettingRoleVOrg_OrganizationRole")
                        .HasPrincipalKey("Rvid", "OrganizationId");
                });

            modelBuilder.Entity("Zobel.Common.Domain.Entities.Application.AppSettingsByUser", b =>
                {
                    b.HasOne("Zobel.Common.Domain.Entities.Application.AppSetting", "Setting")
                        .WithMany("AppSettingsByUser")
                        .HasForeignKey("SettingId")
                        .HasConstraintName("FK_AppSettingsByUser_AppSetting");

                    b.HasOne("Zobel.Common.Domain.Entities.Admin.User", "User")
                        .WithMany("AppSettingsByUser")
                        .HasForeignKey("Userid")
                        .HasConstraintName("FK_AppSettingsByUser_User");
                });

            modelBuilder.Entity("Zobel.Common.Domain.Entities.Application.AppSettingsMV", b =>
                {
                    b.HasOne("Zobel.Common.Domain.Entities.Application.AppSetting", "Setting")
                        .WithMany("AppSettingsMV")
                        .HasForeignKey("SettingId")
                        .HasConstraintName("FK_AppSettingsMV_AppSetting");
                });

            modelBuilder.Entity("Zobel.Common.Domain.Entities.Application.CommentedResource", b =>
                {
                    b.HasOne("Zobel.Common.Domain.Entities.Application.Feature", "Feature")
                        .WithMany("CommentedResources")
                        .HasForeignKey("FeatureId")
                        .HasConstraintName("FK_CommentedResource_Feature");

                    b.HasOne("Zobel.Common.Domain.Entities.Application.Resource", "Resource")
                        .WithMany("CommentedResources")
                        .HasForeignKey("ResourceId")
                        .HasConstraintName("FK_CommentedResource_Resource");
                });

            modelBuilder.Entity("Zobel.Common.Domain.Entities.Application.Feature", b =>
                {
                    b.HasOne("Zobel.Common.Domain.Entities.Application.ResourceType", "ResourceType")
                        .WithMany("Features")
                        .HasForeignKey("ResourceTypeId")
                        .HasConstraintName("FK_Feature_ResourceType");
                });

            modelBuilder.Entity("Zobel.Common.Domain.Entities.Application.Resource", b =>
                {
                    b.HasOne("Zobel.Common.Domain.Entities.Application.ResourceType", "ResourceTypeNavigation")
                        .WithMany("Resources")
                        .HasForeignKey("ResourceType")
                        .HasConstraintName("FK_Resource_ResourceType");
                });

            modelBuilder.Entity("Zobel.Common.Domain.Entities.Application.SharedComment", b =>
                {
                    b.HasOne("Zobel.Common.Domain.Entities.Admin.RoleValue", "Rv")
                        .WithMany("SharedComments")
                        .HasForeignKey("Rvid")
                        .HasConstraintName("FK_SharedComment_RoleValue");
                });

            modelBuilder.Entity("Zobel.Common.Domain.Entities.Application.Tag", b =>
                {
                    b.HasOne("Zobel.Common.Domain.Entities.Application.Tag", "TagParentNavigation")
                        .WithMany("TagParents")
                        .HasForeignKey("TagParent")
                        .HasConstraintName("FK_Tag_Tag");
                });

            modelBuilder.Entity("Zobel.Reports.Domain.Entities.DataUploader.FileContent", b =>
                {
                    b.HasOne("Zobel.Reports.Domain.Entities.DataUploader.StoredFile", "StoredFile")
                        .WithMany()
                        .HasForeignKey("StoredFileId")
                        .HasConstraintName("FK_FileContents_StoredFile")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Zobel.Reports.Domain.Entities.DataUploader.StoredFile", b =>
                {
                    b.HasOne("Zobel.Reports.Domain.Entities.DataUploader.FileExtension", "FileExtension")
                        .WithMany()
                        .HasForeignKey("FileExtensionId")
                        .HasConstraintName("FK_StoredFiles_FileExtension")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Zobel.Common.Domain.Entities.Admin.Organization", "organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_StoredFiles_Organization")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Zobel.Common.Domain.Entities.Admin.User", "UploadedBy")
                        .WithMany()
                        .HasForeignKey("UploadedById")
                        .HasConstraintName("FK_StoredFiles_UploadedBy")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Zobel.Reports.Domain.Entities.ReportManager.Report", b =>
                {
                    b.HasOne("Zobel.Common.Domain.Entities.Admin.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_Report_User");

                    b.HasOne("Zobel.Reports.Domain.Entities.ReportManager.ReportTemplate", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId")
                        .HasConstraintName("FK_Report_ReportTemplate")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Zobel.Reports.Domain.Entities.ReportManager.ReportElement", b =>
                {
                    b.HasOne("Zobel.Reports.Domain.Entities.ReportManager.ReportElement", "Container")
                        .WithMany("Children")
                        .HasForeignKey("ContainerId")
                        .HasConstraintName("FK_ReportElement_ReportElement");

                    b.HasOne("Zobel.Common.Domain.Entities.Admin.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("Zobel.Common.Domain.Entities.Admin.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById");

                    b.HasOne("Zobel.Reports.Domain.Entities.ReportManager.Report", "Report")
                        .WithMany("Content")
                        .HasForeignKey("ReportId")
                        .HasConstraintName("FK_ReportElement_Report")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Zobel.Reports.Domain.Entities.ReportManager.ReportTemplateElement", "ReportTemplateElement")
                        .WithMany()
                        .HasForeignKey("ReportTemplateElementId")
                        .HasConstraintName("FK_ReportElement_ReportTemplateElement")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Zobel.Reports.Domain.Entities.ReportManager.ReportElementPermission", b =>
                {
                    b.HasOne("Zobel.Common.Domain.Entities.Admin.OrganizationRole", "OrganizationRole")
                        .WithMany()
                        .HasForeignKey("OrganizationRoleId")
                        .HasConstraintName("FK_ReportElementPermission_OrganizationRole")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Zobel.Common.Domain.Entities.Admin.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .HasConstraintName("FK_ReportElementPermission_Permission")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Zobel.Reports.Domain.Entities.ReportManager.ReportElement", "ReportElement")
                        .WithMany("ReportElementPermissions")
                        .HasForeignKey("ReportElementId")
                        .HasConstraintName("FK_ReportElementPermission_ReportElement")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Zobel.Reports.Domain.Entities.ReportManager.ReportPermission", b =>
                {
                    b.HasOne("Zobel.Common.Domain.Entities.Admin.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_ReportPermission_Organization")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Zobel.Common.Domain.Entities.Admin.OrganizationRole", "OrganizationRole")
                        .WithMany()
                        .HasForeignKey("OrganizationRoleId")
                        .HasConstraintName("FK_ReportPermission_OrganizationRole")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Zobel.Common.Domain.Entities.Admin.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .HasConstraintName("FK_ReportPermission_Permission");

                    b.HasOne("Zobel.Reports.Domain.Entities.ReportManager.Report", "Report")
                        .WithMany("ReportPermissions")
                        .HasForeignKey("ReportId")
                        .HasConstraintName("FK_ReportPermission_Report")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Zobel.Reports.Domain.Entities.ReportManager.ReportTemplate", b =>
                {
                    b.HasOne("Zobel.Common.Domain.Entities.Admin.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_ReportTemplate_User");
                });

            modelBuilder.Entity("Zobel.Reports.Domain.Entities.ReportManager.ReportTemplateActivePeriod", b =>
                {
                    b.HasOne("Zobel.Common.Domain.Entities.Admin.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_ReportTemplateActivePeriod_Organization")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Zobel.Reports.Domain.Entities.ReportManager.ReportTemplate", "ReportTemplate")
                        .WithMany("ActivePeriods")
                        .HasForeignKey("ReportTemplateId")
                        .HasConstraintName("FK_ReportTemplateActivePeriod_ReportTemplate")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Zobel.Reports.Domain.Entities.ReportManager.ReportTemplateElement", b =>
                {
                    b.HasOne("Zobel.Reports.Domain.Entities.ReportManager.ReportTemplateElement", "Container")
                        .WithMany("Children")
                        .HasForeignKey("ContainerId")
                        .HasConstraintName("FK_ReportTemplatetElement_ReportTemplateElement");

                    b.HasOne("Zobel.Common.Domain.Entities.Admin.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("Zobel.Common.Domain.Entities.Admin.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById");

                    b.HasOne("Zobel.Reports.Domain.Entities.ReportManager.ReportTemplate", "ReportTemplate")
                        .WithMany("Content")
                        .HasForeignKey("ReportTemplateId")
                        .HasConstraintName("FK_ReportTemplateElement_ReportTemplate")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Zobel.Reports.Domain.Entities.ReportManager.ReportTemplateElementPermission", b =>
                {
                    b.HasOne("Zobel.Common.Domain.Entities.Admin.OrganizationRole", "OrganizationRole")
                        .WithMany()
                        .HasForeignKey("OrganizationRoleId")
                        .HasConstraintName("FK_ReportTemplateElementPermission_OrganizationRole")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Zobel.Common.Domain.Entities.Admin.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .HasConstraintName("FK_ReportTemplateElementPermission_Permission")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Zobel.Reports.Domain.Entities.ReportManager.ReportTemplateElement", "ReportTemplateElement")
                        .WithMany("ReportTemplateElementPermissions")
                        .HasForeignKey("ReportTemplateElementId")
                        .HasConstraintName("FK_ReportTemplateElementPermission_ReportTemplateElement")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Zobel.Reports.Domain.Entities.ReportManager.ReportTemplatePermission", b =>
                {
                    b.HasOne("Zobel.Common.Domain.Entities.Admin.OrganizationRole", "OrganizationRole")
                        .WithMany()
                        .HasForeignKey("OrganizationRoleId")
                        .HasConstraintName("FK_ReportTemplatePermission_OrganizationRole")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Zobel.Common.Domain.Entities.Admin.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .HasConstraintName("FK_ReportTemplatePermission_Permission")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Zobel.Reports.Domain.Entities.ReportManager.ReportTemplate", "ReportTemplate")
                        .WithMany("ReportTemplatePermissions")
                        .HasForeignKey("ReportTemplateId")
                        .HasConstraintName("FK_ReportTemplatePermission_ReportTemplate")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
